import { useState } from 'react'
import DbConnect from './components/DbConnect'
import { generateSql } from '../lib/api'

function annotate(sql: string) {
  const up = sql.toUpperCase()
  const notes:string[] = []
  if (up.includes('SELECT'))   notes.push('-- SELECT: –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤—ã–≤–æ–¥–∏–º –∏ –ø–æ—á–µ–º—É')
  if (up.includes('FROM'))     notes.push('-- FROM: –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞/–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
  if (up.includes('JOIN'))     notes.push('-- JOIN: —Å–≤—è–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∫–ª—é—á–∞–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å—Ç—Ä–æ–∫–∏')
  if (up.includes('WHERE'))    notes.push('-- WHERE: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏')
  if (up.includes('GROUP BY')) notes.push('-- GROUP BY: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
  if (up.includes('ORDER BY')) notes.push('-- ORDER BY: –∏—Ç–æ–≥–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è')
  if (up.includes('COALESCE('))notes.push('-- COALESCE: –∑–∞–º–µ–Ω—è–µ–º NULL –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
  if (up.includes('COUNT('))   notes.push('-- COUNT: —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏, COUNT(*) ‚Äî –≤—Å–µ, COUNT(col) ‚Äî —Ç–æ–ª—å–∫–æ –Ω–µ-NULL')
  return notes.length ? `/* –ü–æ—è—Å–Ω–µ–Ω–∏—è:\n${notes.join('\n')}\n*/\n` + sql : sql
}

const DANGEROUS_RE = /\b(DELETE|UPDATE|INSERT|ALTER|DROP|TRUNCATE|MERGE|CREATE|REPLACE)\b/i
const isDangerous = (sql:string) => DANGEROUS_RE.test(sql)

function wrapWithTransaction(sql: string) {
  const body = sql.trim().replace(/;?\s*$/, ';')
  return [
    'BEGIN TRANSACTION;',
    'SAVEPOINT ai_guard; -- —Ç–æ—á–∫–∞ –æ—Ç–∫–∞—Ç–∞',
    '',
    '-- –≤–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∏–∂–µ:',
    body,
    '',
    '-- –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å:',
    '-- ROLLBACK TO SAVEPOINT ai_guard;',
    'COMMIT;'
  ].join('\n')
}

export default function Home() {
  const [tab, setTab] = useState<'scan'|'saved'>('scan')
  const [schemaJson, setSchemaJson] = useState<any | null>(null)
  const [nl, setNl] = useState('')
  const [generatedSql, setGeneratedSql] = useState<string | null>(null)
  const [wrappedSql, setWrappedSql] = useState<string | null>(null)
  const [explain, setExplain] = useState(false)
  const [loadingGen, setLoadingGen] = useState(false)
  const [isDanger, setIsDanger] = useState(false)

  const copy = async (text: string) => {
    try { await navigator.clipboard.writeText(text); alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ‚úÖ') }
    catch { alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å') }
  }

  const onGenerate = async () => {
    if (!schemaJson) return alert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ö–µ–º—É.')
    if (!nl.trim())  return alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.')
    setLoadingGen(true)
    try {
      const data = await generateSql(nl.trim(), schemaJson, 'postgres')
      if (data.blocked) {
        alert('üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ' + (data.reason || 'policy'))
        setGeneratedSql(null); setWrappedSql(null); setIsDanger(false)
        return
      }
      const raw = String(data.sql || '')
      const danger = isDangerous(raw)
      setIsDanger(danger)

      const base = explain ? annotate(raw) : raw
      const wrapped = explain ? annotate(wrapWithTransaction(raw)) : wrapWithTransaction(raw)

      setGeneratedSql(base)
      setWrappedSql(danger ? wrapped : null)
    } catch (e:any) {
      alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ' + e.message)
    } finally {
      setLoadingGen(false)
    }
  }

  const Code = ({children}:{children:string}) => (
    <pre style={{
      background:'#0b1220', border:'1px solid #1f2937', borderRadius:12,
      padding:'12px', whiteSpace:'pre-wrap', fontFamily:'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace',
      fontSize:13, lineHeight:1.5
    }}>{children}</pre>
  )

  return (
    <div>
      <div className="page-wrap">
        <h1 style={{margin:0}}>üß† AI SQL Advisor</h1>
        <p style={{margin:'6px 0 20px',opacity:.8}}>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ SQL. –¢–æ–ª—å–∫–æ SELECT, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.</p>

        <div style={{display:'flex',gap:8,marginBottom:16}}>
          <button onClick={()=>setTab('scan')}
            style={{padding:'10px 14px',borderRadius:12,border:'1px solid #1f2937',
                    background:tab==='scan'?'#111827':'#0f172a',color:'#e5e7eb',cursor:'pointer'}}>
            üîé –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
          </button>
          <button onClick={()=>setTab('saved')}
            style={{padding:'10px 14px',borderRadius:12,border:'1px solid #1f2937',
                    background:tab==='saved'?'#111827':'#0f172a',color:'#e5e7eb',cursor:'pointer'}}>
            üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –±–∞–∑—ã
          </button>
        </div>

        {tab==='scan' && (
          <div style={{border:'1px solid #1f2937',borderRadius:12,padding:16,background:'#0f172a'}}>
            <h3 style={{marginTop:0}}>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã</h3>
            <DbConnect onLoaded={(s)=>{ setSchemaJson(s); setGeneratedSql(null); setWrappedSql(null); setIsDanger(false) }} />

            {schemaJson && (
              <>
                <div style={{marginTop:12}}>
                  <span style={{background:'#10b98120', color:'#065f46', padding:'4px 10px', borderRadius:999, fontSize:12, border:'1px solid #10b98150'}}>
                    –°—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚Ä¢ —Ç–∞–±–ª–∏—Ü: {schemaJson.countTables ?? Object.keys(schemaJson.tables||{}).length}
                  </span>
                </div>
                <details style={{marginTop:10}}>
                  <summary>–ü–æ–∫–∞–∑–∞—Ç—å JSON-—Å—Ö–µ–º—É</summary>
                  <Code>{JSON.stringify(schemaJson, null, 2)}</Code>
                </details>
              </>
            )}

            <hr style={{borderColor:'#1f2937', margin:'20px 0'}}/>

            <h3>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL</h3>
            <textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–∫–∞–∂–∏ –∏–º–µ–Ω–∞ –∏ email –∫–ª–∏–µ–Ω—Ç–æ–≤...'"
              value={nl}
              onChange={e=>setNl(e.target.value)}
              rows={5}
            />

            <div style={{display:'inline-flex',alignItems:'center',gap:8,marginTop:10,fontSize:14,opacity:.9}}>
              <input id="explain" type="checkbox" checked={explain} onChange={e=>setExplain(e.target.checked)} />
              <label htmlFor="explain" style={{cursor:'pointer'}}>–ü–æ—è—Å–Ω–∏—Ç—å SQL</label>
            </div>

            <div style={{display:'grid', gridTemplateColumns:'1fr 1fr', gap:10, marginTop:10}}>
              <button onClick={onGenerate} disabled={loadingGen}
                style={{background:'linear-gradient(90deg, #22d3ee, #3b82f6)', color:'#0b1220', fontWeight:700, border:'none', borderRadius:12, padding:'10px 14px', cursor:'pointer'}}>
                {loadingGen ? '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º‚Ä¶' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL'}
              </button>
              <button
                onClick={()=>{ setGeneratedSql(null); setWrappedSql(null); setIsDanger(false); setNl('') }}
                style={{background:'#0b1220', color:'#e5e7eb', border:'1px solid #1f2937', borderRadius:12, padding:'10px 14px', cursor:'pointer'}}
              >–û—á–∏—Å—Ç–∏—Ç—å</button>
            </div>

            {isDanger && (
              <div style={{marginTop:16, border:'1px solid #f59e0b55', background:'#f59e0b10', borderRadius:12, padding:'12px'}}>
                <b style={{color:'#fbbf24'}}>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –∑–∞–ø—Ä–æ—Å –º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ/—Å—Ö–µ–º—É. –õ—É—á—à–µ –∑–∞–ø—É—Å–∫–∞—Ç—å <i>–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å SAVEPOINT/ROLLBACK</i>. –ù–∏–∂–µ ‚Äî –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.
              </div>
            )}

            {generatedSql && (
              <div style={{marginTop:16}}>
                <h3 style={{marginTop:0}}>–†–µ–∑—É–ª—å—Ç–∞—Ç</h3>

                {isDanger && wrappedSql ? (
                  <>
                    <div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>
                      <h4 style={{margin:'8px 0 6px'}}>–í–∞—Ä–∏–∞–Ω—Ç A ‚Äî –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</h4>
                      <button onClick={()=>copy(wrappedSql!)} style={{border:'1px solid #334155',background:'#0b1220',color:'#e5e7eb',borderRadius:10,padding:'6px 10px',cursor:'pointer'}}>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                    <Code>{wrappedSql}</Code>

                    <div style={{display:'flex',justifyContent:'space-between',alignItems:'center', marginTop:10}}>
                      <h4 style={{margin:'8px 0 6px'}}>–í–∞—Ä–∏–∞–Ω—Ç B ‚Äî –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h4>
                      <button onClick={()=>copy(generatedSql!)} style={{border:'1px solid #334155',background:'#0b1220',color:'#e5e7eb',borderRadius:10,padding:'6px 10px',cursor:'pointer'}}>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                    <Code>{generatedSql}</Code>
                  </>
                ) : (
                  <>
                    <div style={{display:'flex',justifyContent:'flex-end',alignItems:'center'}}>
                      <button onClick={()=>copy(generatedSql!)} style={{border:'1px solid #334155',background:'#0b1220',color:'#e5e7eb',borderRadius:10,padding:'6px 10px',cursor:'pointer'}}>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                    <Code>{generatedSql}</Code>
                  </>
                )}
              </div>
            )}
          </div>
        )}

        {tab==='saved' && (
          <div style={{border:'1px solid #1f2937',borderRadius:12,padding:16,background:'#0f172a'}}>
            <p style={{marginTop:0, opacity:.8}}>–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ö–µ–º (bucket: <code>schemas</code>).</p>
          </div>
        )}
      </div>
    </div>
  )
}
